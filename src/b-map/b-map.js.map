{"version":3,"sources":["b-map/b-map.coffee"],"names":[],"mappings":"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","file":"b-map/b-map.js","sourceRoot":"/source/","sourcesContent":["module = angular.module 'B.Map', []\n\nmodule.factory 'topojson', ->\n  topojson\n\n# load topojson\nmodule.factory 'bTopojsonSvc', ($http) ->\n  $http.get '../dist/ne_110m_admin_0_countries_topojson.json'\n\n# extend d3 w/ collission func\nmodule.factory 'd3map', (d3) ->\n  d3.collision = (alpha, nodes, radiusKey, bubblePadding, w, h) ->\n    # alpha controls how hard nodes collide & how far they're pushed\n    radiusKey = 'r' + radiusKey\n    quadtree = d3.geom.quadtree nodes\n    (node) ->\n      nr = node[radiusKey] + bubblePadding\n      nx1 = node.x - nr\n      nx2 = node.x + nr\n      ny1 = node.y - nr\n      ny2 = node.y + nr\n      quadtree.visit (quad, x1, y1, x2, y2) ->\n        if quad.point and (quad.point isnt node)\n          x = node.x - quad.point.x\n          y = node.y - quad.point.y\n          l = Math.sqrt x * x + y * y\n          r = nr + quad.point[radiusKey] # can add even more padding here\n          if l < r\n            l = (l - r) / l * alpha\n            node.x -= x *= l\n            node.y -= y *= l\n            quad.point.x += x\n            quad.point.y += y\n        x1 > nx2 or x2 < nx1 or y1 > ny2 or y2 < ny1\n\n  return d3\n\nmodule.factory 'bMapDataSvc', ($filter, $q, d3map, topojson, bDataSvc, bTopojsonSvc) ->\n  parseData = (data) ->\n    _deferred = $q.defer()\n\n    countryData = data[0].data.geo\n    topojsonData = data[1].data # $http returns other stuff w/ data\n\n    maxUsers = d3map.max countryData, (country) -> country.users\n    maxDensity = d3map.max countryData, (country) -> country.density\n    minDensity = d3map.min countryData, (country) -> country.density\n\n    colorsUsers = d3.scale.log()\n      .domain [2, maxUsers] # backend excludes countries w/ users <2\n      .range [\"#00acee\", \"#EF5734\"]\n    colorsDensity = d3map.scale.log()\n      .domain [minDensity, maxDensity]\n      .range [\"#00acee\", \"#EF5734\"]\n    radiusUsers = d3map.scale.sqrt()\n      .domain [2, maxUsers]\n      .range [2, 50]\n    radiusDensity = d3map.scale.sqrt()\n      .domain [minDensity, maxDensity]\n      .range [2, 40]\n\n    topo = topojson.feature topojsonData, topojsonData.objects.countries\n    countryDataTopo = topo.features\n      .filter (d) ->\n        countryData.some (country) -> country.isoCode is d.id\n      .map (d) ->\n        # ES6 array.find supported in FF & Chrome but not IE\n        bowerData = $filter('filter')(countryData, {isoCode: d.id})[0]\n        d.data = bowerData\n        d.rDensity = if bowerData then radiusDensity bowerData.density else 0\n        d.rUsers = if bowerData then radiusUsers bowerData.users else 0\n        d\n\n    _deferred.resolve {\n      topo: topo\n      topojsonData: topojsonData\n      colorsUsers: colorsUsers\n      colorsDensity: colorsDensity\n      radiusUsers: radiusUsers\n      radiusDensity: radiusDensity\n      countryDataTopo: countryDataTopo\n    }\n    _deferred.promise\n\n  $q.all([bDataSvc.fetchAllP, bTopojsonSvc]).then parseData\n\nmodule.directive \"bMap\", (d3map, topojson, bMapDataSvc, $window) ->\n  templateUrl: 'b-map/b-map.html'\n  restrict: 'E'\n  link: (scope, ele) ->\n    tick = null\n    scope.chartType = \"Density\"\n    scope.zoomed = false\n    scope.$watch 'chartType', (chartType, chartTypeOld) ->\n      if chartType != chartTypeOld\n        radiusKey = 'r' + chartType\n\n        svg.selectAll \".label\"\n          .text (d) -> d.data.isoCode if d[radiusKey] >= bubbleRBreaks.sm\n          .attr \"class\", \"label\" # removes all other classes\n          # TODO: change text size here so transition works, vs. doing it in CSS\n          .classed \"sm\", (d) -> d[radiusKey] <= bubbleRBreaks.md\n          .classed \"md\", (d) -> d[radiusKey] > bubbleRBreaks.md and d[radiusKey] <= bubbleRBreaks.lg\n          .classed \"lg\", (d) -> d[radiusKey] > bubbleRBreaks.lg\n\n        svg.selectAll \".bubble\"\n          .transition().duration transitionDuration\n          .attr \"r\", (d) -> d[radiusKey]\n          .attr \"fill\", (d) -> scope.data[\"colors\" + chartType] d.data[chartType.toLowerCase()]\n\n        force.start()\n\n      return\n\n    bubblePadding = 1 # for collision detection\n    bubbleOverBorder = 5 # allow bubbles to go out of bounding box a bit but not too much, see tick()\n    bubbleRBreaks = sm: 10, md: 15, lg: 20 # for setting font sizes in bubbles\n\n    transitionDuration = 250\n\n    canvas = ele[0].querySelector \".b-map\"\n    # d3.select(canvas).node().offsetWidth doesn't work in FF\n    w = canvas.clientWidth\n    h = canvas.clientHeight\n    svg = d3map.select(canvas).append(\"svg\").attr(\"width\", w).attr(\"height\", h).classed(\"svg-map\", true)\n\n    projection = d3map.geo.equirectangular()\n      .scale 160 # default to 150\n      .translate [w / 2.1, h / 1.55] # move a little to the left & down to accommodate for europe\n      # .precision(.1) # default Math.SQRT(1/2) = .5\n    path = d3map.geo.path().projection projection\n\n    force = d3map.layout.force()\n      .gravity 0 # disable, implemented elsewhere\n      .size [w * 2, h * 2]\n\n    # custom gravity function to draw nodes to original x0/y0 position instead of center of chart\n    gravity = (k) -> (d) ->\n      d.x += (d.x0 - d.x) * k\n      d.y += (d.y0 - d.y) * k\n\n    render = (data) ->\n      scope.data = data\n      # compute centroid for each country, can't do it in data due to not having path func\n      data.countryDataTopo = data.countryDataTopo.map (d) ->\n        centroid = path.centroid d.geometry # returns x/y\n        d.x = centroid[0]; d.y = centroid[1]\n        d.x0 = centroid[0]; d.y0 = centroid[1]\n        d\n\n      landContainer = svg.append(\"g\").attr \"class\", \"container land\"\n      # land polygon\n      landContainer.append(\"path\").datum(data.topo).attr(\"class\", \"land\").attr \"d\", path\n      # country boundary mesh\n      landContainer.append(\"path\")\n        .datum topojson.mesh data.topojsonData, data.topojsonData.objects.countries, (a, b) -> a isnt b\n        .attr \"class\", \"country-boundary\"\n        .attr \"d\", path\n\n      countryContainer = svg.append(\"g\").attr \"class\", \"container countries\"\n      countries = countryContainer.selectAll \"g\"\n          .data data.countryDataTopo\n        .enter().append \"g\"\n          .attr \"class\", \"country\"\n          .attr \"id\", (d) -> d.data.isoCode\n      countryBubbles = countries.append \"circle\"\n        .attr \"class\", \"bubble\"\n        .attr \"r\", (d) -> d.rDensity\n        .attr \"fill\", (d) -> data.colorsDensity d.data.density\n      countryLabels = countries.append \"text\"\n        .text (d) -> d.data.isoCode if d.rDensity >= bubbleRBreaks.sm\n        .attr \"class\", \"label\"\n        .classed \"sm\", (d) -> d.rDensity <= bubbleRBreaks.md\n        .classed \"md\", (d) -> d.rDensity > bubbleRBreaks.md and d.rDensity <= bubbleRBreaks.lg\n        .classed \"lg\", (d) -> d.rDensity > bubbleRBreaks.lg\n\n      zoom = ->\n        if (!scope.zoomed)\n          x = d3map.mouse(this)[0]\n          y = d3map.mouse(this)[1]\n          k = 3\n          scope.zoomed = true\n        else\n          x = w / 2\n          y = h / 2\n          k = 1\n          scope.zoomed = false\n\n        landContainer.transition()\n          .duration(750)\n          .attr \"transform\", \"translate(\" + w / 2 + \",\" + h / 2 + \")scale(\" + k + \")translate(\" + -x + \",\" + -y + \")\"\n          .style \"stroke-width\", 1.5 / k + \"px\"\n\n        countryContainer.transition()\n          .duration(750)\n          .attr \"transform\", \"translate(\" + w / 2 + \",\" + h / 2 + \")scale(\" + k + \")translate(\" + -x + \",\" + -y + \")\"\n          .style \"stroke-width\", 1.5 / k + \"px\"\n\n        return\n\n      landContainer.selectAll(\"path\").on(\"click\", zoom)\n      countryContainer.selectAll(\"g\").on(\"click\", zoom)\n\n      fitScreen = ->\n        w = canvas.clientWidth\n        d3map.select(\".svg-map\")\n          .attr \"width\", w\n          .attr \"height\", h\n        d3map.behavior.zoom().center [ w / 2, h / 2 ]\n        return\n\n      $window.onresize = -> fitScreen()\n\n      tick = (e) ->\n        radiusKey = 'r' + scope.chartType\n        # cx / cy constrained so bubbles go out of bounding box a bit (10) but not too much\n        countryBubbles\n          .each gravity e.alpha * .1 # custom gravity function to draw nodes to original x0/y0 position instead of center of chart\n          .each d3map.collision .2, scope.data.countryDataTopo, scope.chartType, bubblePadding\n          .attr \"cx\", (d) -> Math.max d[radiusKey], (Math.min w - d[radiusKey], d.x) + bubbleOverBorder\n          .attr \"cy\", (d) -> Math.max d[radiusKey] - bubbleOverBorder, Math.min h - d[radiusKey], d.y\n        countryLabels\n          .attr \"x\", (d) -> Math.max d[radiusKey], (Math.min w - d[radiusKey], d.x) + bubbleOverBorder\n          .attr \"y\", (d) ->\n            res = Math.max d[radiusKey] - bubbleOverBorder, Math.min h - d[radiusKey], d.y\n            if d[radiusKey] <= bubbleRBreaks.md then res + 3 else if d[radiusKey] > bubbleRBreaks.md and d[radiusKey] <= bubbleRBreaks.lg then res + 4 else res + 6\n        return\n\n      force.nodes(countryBubbles[0]).on(\"tick\", tick).start()\n      return\n\n    bMapDataSvc.then render\n    return\n"]}