{"version":3,"sources":["b-chart-users/b-chart-users.coffee"],"names":[],"mappings":"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","file":"b-chart-users/b-chart-users.js","sourceRoot":"/source/","sourcesContent":["module = angular.module 'B.Chart.Users', []\n\n\nmodule.service 'bChartUserDataSvc', ($q, bDataSvc, d3) ->\n  parseArray = (dataArr) ->\n    # in: [key, dateStr, val]\n    # out: {key: str, date: date, val: num, movingAvg: num}\n    mAvg = movingAverage(dataArr, 7, (d) -> d[2])\n    parseDate = d3.time.format(\"%Y%m%d\").parse # e.g. 20140301\n    dataArr.slice(6).map (d, i) ->\n      key: d[0]\n      date: parseDate d[1]\n      val: d[2]\n      movingAvg: mAvg[i]\n\n  parseData = (data) ->\n    _deferred = $q.defer()\n\n    data = data.data.users\n    data = d3.nest().key((d) -> d[0]).entries data # group by key; apply to data\n    newUsersData      = parseArray data[0].values\n    existingUsersData = parseArray data[1].values\n    npmInstallsData   = parseArray data[2].values\n    data = [newUsersData, existingUsersData, npmInstallsData]\n    _deferred.resolve\n      data: data\n    _deferred.promise\n\n  movingAverage = (dataArr, numDaysToAverage, accessor) ->\n    stack = []\n    out = []\n    for d in dataArr\n      x = if accessor? then accessor(d) else d\n      stack.unshift(x)\n      if stack.length == numDaysToAverage\n        avg = d3.sum(stack) / numDaysToAverage\n        out.push(avg)\n        stack.pop()\n    out\n\n  bDataSvc.fetchAllP.then parseData\n\nmodule.directive \"bChartUsers\", (d3, bChartUserDataSvc) ->\n  templateUrl: 'b-chart-users/b-chart-users.html'\n  restrict: 'E'\n  compile: -> # no need to access element due to svg element hardcoded in html partial\n    render = (data) ->\n      stack = d3.layout.stack()\n        .values (d) -> d\n        .x (d) -> d.date\n        .y (d) -> d.movingAvg\n        .order \"reverse\"\n\n      stackedData = stack data.data.slice 0, 2\n      newUsersData = stackedData[0]\n      existingUsersData = stackedData[1]\n      npmData = data.data[2]\n\n      xScale = new Plottable.Scale.Time()\n      yScaleUsers    = new Plottable.Scale.Linear()\n      yScaleInstalls = new Plottable.Scale.Linear()\n\n      # disable auto-padding on the date axis since it looks ugly when compared with areaPlots\n      xScale.domainer new Plottable.Domainer().pad(0)\n      # Make sure the yScales both include 0 and add padding on top. Also, they look better w/ fewer ticks\n      domainer = new Plottable.Domainer().addIncludedValue(0).pad(0.2).addPaddingException(0)\n      yScaleUsers.domainer(domainer).ticks(5)\n      yScaleInstalls.domainer(domainer).ticks(5)\n\n      colorScale = (new Plottable.Scale.Color()) # Only used to generate legend right now\n        .domain [\"New Users\", \"Existing Users\", \"npm Installs\"]\n        .range [\"#00acee\", \"#ffcc2f\", \"#EF5734\"]\n\n      xAxis         = new Plottable.Axis.Time xScale, \"bottom\"\n      format = (n) -> Math.round(n/1000).toString() + \"k\"\n      yAxisUsers    = new Plottable.Axis.Numeric yScaleUsers, \"left\", format\n      yAxisInstalls = new Plottable.Axis.Numeric yScaleInstalls, \"right\", format\n\n      gridlines     = new Plottable.Component.Gridlines xScale, yScaleUsers\n      legend        = new Plottable.Component.Legend(colorScale).xAlign \"left\"\n      usersLabel    = new Plottable.Component.AxisLabel \"Daily Active Users\", \"left\"\n      installsLabel = new Plottable.Component.AxisLabel \"Daily npm Installs\", \"left\"\n\n      stackedAreaPlot_users = new Plottable.Plot.StackedArea xScale, yScaleUsers\n      stackedAreaPlot_users\n        .addDataset \"existing\", existingUsersData\n        .addDataset \"new\", newUsersData\n        .project \"fill\", ((d) -> if d.key is 'N' then 1 else 2), colorScale\n      stackedAreaPlot_users\n        .project(\"x\", \"date\", xScale)\n        .project(\"y0\", \"y0\", yScaleUsers)\n\n      line_installs = (new Plottable.Plot.Line(npmData, xScale, yScaleInstalls))\n        .project(\"x\", \"date\", xScale)\n        .project(\"y\", \"movingAvg\", yScaleInstalls)\n        .classed(\"npm-installs\", true);\n\n      center = stackedAreaPlot_users.merge(line_installs).merge(gridlines).merge(legend)\n      chart = new Plottable.Component.Table([\n          [usersLabel, yAxisUsers, center     , yAxisInstalls, installsLabel],\n          [null      , null      , xAxis      , null         , null         ]\n        ]).renderTo(\"#users-chart\");\n\n      return\n\n    bChartUserDataSvc.then render\n    return\n"]}